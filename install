#!/bin/sh

cd "$(dirname "$0")"
DOTFILES=$(pwd)

_all=yes
_link=
_shell=
_external=
_force=
while	case "$#,$1" in
	0,*)	break ;;
	*,--)	shift; break ;;
	*,-l | *,--link)	_all= ; _link=yes ;;
	*,-s | *,--shell)	_all= ; _shell=yes ;;
	*,-e | *,--external)	_all= ; _external=yes ;;
	*,-f | *,--force)	_force=yes ;;
	*,-V | *,--vim)         _vim=yes ;;
	esac
do
	shift
done

# Verify that we tracked that file with Git history before
# If yes, force relink, otherwise, warn them
if test -n "$_force"
then
	vlink() {
		rm -f "$2"
		cp -fp "$1" "$2"
	}
else
	if test "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = true
	then
		vtracked() {
			_ohash=$(git hash-object "$1")
			test "$(git cat-file -t "$_ohash" 2>/dev/null)" = blob
		}
	else
		vtracked() {
			return 1
		}
	fi
	vlink() {
		if test ! -f "$2"
		then
			cp -fp "$1" "$2"
		elif cmp -s "$1" "$2"
		then
			:
		elif vtracked "$2"
		then
			rm -f "$2"
			cp -fp "$1" "$2"
		else
			printf "%s \n" "NO LINK: '$2' exists and not tracked."
		fi
	}
fi


test -n "$_all$_external" &&
git submodule update --init || :

# There's a bug in stow --dotfiles
# When the dot-dir already exists.
# https://lists.gnu.org/archive/html/bug-stow/2020-05/msg00000.html
# Roll my own
find home -type d |
	sed -n "s,home/,$HOME/.,p" |
	xargs mkdir -p
mkdir -p ~/bin

# stow --ignore='\.sw.' --dotfiles -t "$HOME" home
for _file in bin/*
do
	vlink "$_file" "$HOME/$_file"
done

mksupervise() {
	if test ! -L "$HOME/.local/service/$2/supervise"; then
		ln -s "/run/x-user/$USER/runit/supervise.$1" \
			"$HOME/.local/service/$2/supervise"
	fi
}

do_link() {
	for _src in home/local/service/*; do
		_target=".${_src#home/}"
		_sv=${_src##*/}
		if test -f "$_src/log/run"; then
			mksupervise "$_sv-log" "$_sv/log"
			vlink "$_src/log/run" "$HOME/$_target/log/run"
		fi
		mksupervise "$_sv" "$_sv"
		for _file in "$_src"/*; do
			case "$_file" in
			*/run|*/log) ;;
			*/down) : >"$HOME/$_target/down" ;;
			*)	vlink "$_file" "$HOME/$_target/${_file##*/}" ;;
			esac
		done
		vlink "$_src/run" "$HOME/$_target/run"
	done

	find home -path home/local/service -prune \
		-o -name '*.sw?' -prune \
		-o -name '#*#' -prune \
		-o -type f -print \
		-o -type l -print |
	while read -r _src; do
		_target=".${_src#home/}"
		if test -L "$_src"; then
			cp "$_src" "$HOME/$_target"
		elif test -f "$_src"; then
			vlink "$DOTFILES/$_src" "$HOME/$_target"
		fi
	done
}

merge_shrc() {
	printf '%s\n' *.sh *."$1" *."$1".in *."$1.$(uname -s)" |
	sort |
	while read f; do
		case "$f" in
		"*."*)	;;
		*.in)	sed "s,[$]DOTFILES,$DOTFILES," "$f" ;;
		*)	cat "$f" ;;
		esac
	done
}

mk_rc() {
	cd sh
	if command -v bash >/dev/null 2>&1; then
		merge_shrc bash >"$HOME/.bashrc"
	fi
	if command -v zsh >/dev/null 2>&1; then
		merge_shrc zsh >"$HOME/.zshrc"
		zsh -c "zcompile $HOME/.zshrc"
	fi
	cd ..
}

test -n "$_all$_link" && do_link
test -n "$_all$_shell" && mk_rc

if test -n "$_vim" && test ! -L ~/.vim/pack/bundle/start; then
	mkdir -p ~/.vim/pack/bundle
	ln -s $DOTFILES/external/vim ~/.vim/pack/bundle/start
fi

mkdir -p ~/.emacs.d/elisp
_tmpfile=$(mktemp)
for dir in "$DOTFILES"/external/emacs/*
do
	test -d "$dir" &&
	printf "(add-to-list 'load-path \"%s\")\\n" "$dir"
done >"$_tmpfile"

if ! cmp "$_tmpfile" ~/.emacs.d/elisp/local-generated.el; then
	cp "$_tmpfile" ~/.emacs.d/elisp/local-generated.el
fi
